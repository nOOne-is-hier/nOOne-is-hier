name: Update README metrics (all repos, 30d)

on:
  schedule:
    - cron: '0 0 * * *'           # 매일 00:00 UTC (KST 09:00)
  workflow_dispatch:

jobs:
  commit-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      DAYS: 30                     # 분석 기간(일)
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    ########################################################################
    # 0) 체크아웃 & .gitignore 보강
    ########################################################################
    - uses: actions/checkout@v4

    - name: Ensure temp files are ignored
      run: |
        cat <<'EOF' >> .gitignore
        # added by workflow — temp analytics
        hours.txt
        me.txt
        own.txt
        member.txt
        repos.txt
        EOF

    ########################################################################
    # 1) Python 환경(matplotlib) 준비
    ########################################################################
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install matplotlib
      run: pip install matplotlib

    ########################################################################
    # 2) 분석 대상 레포지토리 수집
    ########################################################################
    - name: Collect repositories (owner+member, fork 제외)
      id: repos
      run: |
        set -euo pipefail
        gh api user --jq .login > me.txt
        GH_TOKEN=$GH_TOKEN gh api "user/repos?type=owner&per_page=100" --paginate \
          --jq '.[]|select(.fork==false)|.full_name' > own.txt
        GH_TOKEN=$GH_TOKEN gh api "user/repos?type=member&per_page=100" --paginate \
          --jq '.[]|select(.fork==false)|.full_name' > member.txt
        sort -u own.txt member.txt > repos.txt
        echo "repo_count=$(wc -l < repos.txt)" >> "$GITHUB_OUTPUT"

    ########################################################################
    # 3) 커밋 시각 집계 (최근 N일)
    ########################################################################
    - name: Aggregate commit hours
      id: hours
      run: |
        set -euo pipefail
        since=$(date -u -d "$DAYS days ago" '+%Y-%m-%dT%H:%M:%SZ')
        > hours.txt

        while read repo; do
          def=$(GH_TOKEN=$GH_TOKEN gh api "repos/$repo" --jq .default_branch)
          GH_TOKEN=$GH_TOKEN gh api "repos/$repo/commits?sha=$def&since=$since&per_page=100" \
            --paginate --jq '.[].commit.author.date' >> hours.txt || true
        done < repos.txt

        total=$(wc -l < hours.txt | xargs)
        morning=0; daytime=0; evening=0; night=0

        while read iso; do
          hr=${iso#*T}; hr=${hr%%:*}
          case $hr in
            06|07|08|09|10|11) morning=$((morning+1)) ;;
            12|13|14|15|16|17) daytime=$((daytime+1)) ;;
            18|19|20|21|22|23) evening=$((evening+1)) ;;
            *) night=$((night+1)) ;;
          esac
        done < hours.txt

        echo "morning=$morning" >> $GITHUB_OUTPUT
        echo "daytime=$daytime" >> $GITHUB_OUTPUT
        echo "evening=$evening" >> $GITHUB_OUTPUT
        echo "night=$night"     >> $GITHUB_OUTPUT
        echo "total=$total"     >> $GITHUB_OUTPUT

    ########################################################################
    # 4) commit‑hours.png 그래프 생성 (리포 루트에 저장)
    ########################################################################
    - name: Build commit-hours.png
      run: |
        python - "$@" <<'PY' "${{ steps.hours.outputs.morning }}" \
                            "${{ steps.hours.outputs.daytime }}" \
                            "${{ steps.hours.outputs.evening }}" \
                            "${{ steps.hours.outputs.night }}" \
                            "${{ env.DAYS }}"
        import sys, matplotlib.pyplot as plt, os
        morning, daytime, evening, night, days = map(int, sys.argv[1:5]) + [sys.argv[5]]
        labels  = ['Morning','Daytime','Evening','Night']
        values  = [morning, daytime, evening, night]
        colors  = ['#FFD54F','#4FC3F7','#9575CD','#607D8B']

        fig, ax = plt.subplots(figsize=(6,3))
        bars = ax.barh(labels, values, color=colors)
        ax.set_xlabel('Commits')
        ax.set_title(f'🕒 Commits in Last {days} Days')
        for bar in bars:
            w = bar.get_width()
            ax.text(w+1, bar.get_y()+bar.get_height()/2, f'{w}', va='center')
        plt.tight_layout()
        plt.savefig('commit-hours.png', dpi=120, bbox_inches='tight')
        PY

    # 4‑1) 이미지 존재 확인 (디버그용)
    - name: Verify image exists
      run: |
        ls -l commit-hours.png || (echo "❌ commit-hours.png missing" && exit 1)

    ########################################################################
    # 5) README 에 이미지 블록 주입
    ########################################################################
    - name: Inject chart into README
      run: |
        new_block='<p align="center">\n<img src="commit-hours.png" width="500" alt="Commit activity in last 30 days"/>\n</p>'
        awk -v nb="$new_block" '
          /<!--START_SECTION:commit_hours-->/ { print; print nb; skip=1; next }
          /<!--END_SECTION:commit_hours-->/   { skip=0; print; next }
          skip!=1 { print }
        ' README.md > README.tmp && mv README.tmp README.md

    ########################################################################
    # 6) 변경사항 커밋 & 푸시
    ########################################################################
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "🤖 chore: update ${{ env.DAYS }}d commit‑hour stats (image)"
        # △ 한 줄에 모두 써야 두 파일 다 stage 됨
        file_pattern: "README.md commit-hours.png"

    ########################################################################
    # 7) (옵션) README diff 출력
    ########################################################################
    - name: Show README diff
      if: always()
      run: git diff --stat README.md || echo "✅ No diff"
