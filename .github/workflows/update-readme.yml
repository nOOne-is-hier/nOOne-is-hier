name: Update README metrics (all repos, 30d)

on:
  schedule:
    - cron: '0 0 * * *'   # 매일 00:00 UTC (KST 09:00)
  workflow_dispatch:

jobs:
  commit-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      DAYS: 30
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    # ------------------------------------------------------------------ #
    - uses: actions/checkout@v4

    # 0) ▶ .gitignore에 임시 파일 추가  ------------------------- #
    - name: Ensure temp files are ignored
      run: |
        cat <<'EOF' >> .gitignore
        # added by workflow — temp analytics
        commit-hours.md
        hours.txt
        hourcount.txt
        me.txt
        own.txt
        member.txt
        repos.txt
        EOF

    # 1) 전체 레포 목록 수집 ----------------------------------- #
    - name: Collect repositories (owner + member, fork 제외)
      id: repos
      run: |
        set -euo pipefail
        gh api user --jq .login > me.txt

        GH_TOKEN=$GH_TOKEN gh api "user/repos?type=owner&per_page=100" --paginate \
          --jq '.[]|select(.fork==false)|.full_name' > own.txt

        GH_TOKEN=$GH_TOKEN gh api "user/repos?type=member&per_page=100" --paginate \
          --jq '.[]|select(.fork==false)|.full_name' > member.txt

        sort -u own.txt member.txt > repos.txt
        echo "count=$(wc -l < repos.txt)" >> "$GITHUB_OUTPUT"

    # 2) 최근 N일 커밋 집계 ------------------------------------ #
    - name: Aggregate commit hours (last ${{ env.DAYS }} days)
      run: |
        set -euo pipefail
        since=$(date -u -d "$DAYS days ago" '+%Y-%m-%dT%H:%M:%SZ')
        > hours.txt

        while read repo; do
          echo "▶ $repo"
          def=$(GH_TOKEN=$GH_TOKEN gh api "repos/$repo" --jq .default_branch)
          GH_TOKEN=$GH_TOKEN gh api "repos/$repo/commits?sha=$def&since=$since&per_page=100" \
            --paginate --jq '.[].commit.author.date' >> hours.txt || true
        done < repos.txt

        if [ ! -s hours.txt ]; then
          echo "ℹ️  최근 $DAYS 일간 커밋이 없습니다."
        fi

        sort hours.txt | cut -dT -f2 | cut -d: -f1 | uniq -c > hourcount.txt
        {
          echo "#### 🕒 Commits in Last ${DAYS} Days by Hour (All Repos)"
          echo "_Last updated: $(date -u '+%Y-%m-%d %H:%M UTC')_"
          echo "| Hour | # Commits |"
          echo "|:----:|:---------:|"
          awk '{printf "| %02d:00 | %d |\n", $2, $1}' hourcount.txt
        } > commit-hours.md

    # 3) README에 테이블 주입 --------------------------------- #
    - name: Inject table into README
      run: |
        s='<!--START_SECTION:commit_hours-->'
        e='<!--END_SECTION:commit_hours-->'
        awk -v s="$s" -v e="$e" '
          index($0,s) {
            print gensub(/^[[:space:]]*/, "", 1) s
            while ((getline<"commit-hours.md")>0) print
            skip=1; next
          }
          index($0,e) { skip=0 }
          skip!=1 { print }
        ' README.md > README.tmp && mv README.tmp README.md

    # 4) 변경 사항이 있을 때만 자동 커밋 ----------------------- #
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "🤖 chore: update ${DAYS}d all‑repo commit‑hour stats"
        file_pattern: README.md      # README만 커밋
        # skip_dirty_check 기본값(false) → 변경이 없으면 조용히 성공

    # 5) (선택) 로그용 diff ------------------------------------ #
    - name: Show README diff (debug)
      if: always()
      run: git diff --stat README.md || echo "✅ No diff"
